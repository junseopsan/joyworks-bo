// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String?
  phoneNumber   String?
  department    String?
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  questions     Question[]
  answers       Answer[]
  comments      Comment[]
  helpfulVotes  HelpfulVote[]
  notifications Notification[]
}

model Question {
  id          String    @id @default(cuid())
  title       String
  content     String
  isNotice    Boolean   @default(false)
  viewCount   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  
  answers     Answer[]
  comments    Comment[]
  tags        TagsOnQuestions[]
}

model Answer {
  id          String    @id @default(cuid())
  content     String
  isAccepted  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  comments    Comment[]
  helpfulVotes HelpfulVote[]
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  
  questionId  String?
  question    Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  answerId    String?
  answer      Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  
  questions   TagsOnQuestions[]
}

model TagsOnQuestions {
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  tagId       String
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([questionId, tagId])
}

model HelpfulVote {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  answerId    String
  answer      Answer    @relation(fields: [answerId], references: [id], onDelete: Cascade)
  
  @@unique([userId, answerId])
}

model Notification {
  id          String    @id @default(cuid())
  type        String    // "ANSWER", "COMMENT", "ACCEPTED", etc.
  message     String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
